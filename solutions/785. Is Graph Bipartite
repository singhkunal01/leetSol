class Solution {
bool bipartiteDFS(int node,vector<vector<int>>& graph,vector<int> &color){
    int sz = graph.size();
        if(color[node]==-1)color[node] = 1;//mark as colored
        for (int i = 0;i<graph[node].size();i++) {
            if (color[graph[node][i]] == -1) {
                color[graph[node][i]] = 1 - color[node];
                if(!(bipartiteDFS(graph[node][i], graph, color))) return false;
            }
            //else if check whether the adjacents of current node having same color or not if not then return false'
            else if (color[graph[node][i]] == color[node])
                return false;
        }
    return true;
}
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
            vector<int> color(n, -1);
//for multiple components
    for (int i = 0; i < n; i++) {
        if (color[i] == -1) {
//check for the bipartite
            if (!bipartiteDFS(i, graph, color)) return false;
        }
    }
    return true;
    }
};
